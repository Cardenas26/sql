CREATE TABLE student(
    student_id INT PRIMARY KEY,
    name VARCHAR(26),
    major VARCHAR(20)
);
//show the table
DESCRIBE student;
// delete table
DROP TABLE student;
//change table
ALTER TABLE student ADD gpa DECIMAL(3,2);

ALTER TABLE student DROP COLUMN gpa


//inserting data
SELECT * FROM student;
INSERT INTO student(student_id, name) VALUES( 3, 'Claire'

);


// auto increment
CREATE TABLE student(
    student_id INT AUTO_INCREMENT,
    name VARCHAR(26),
    major VARCHAR(20),
    PRIMARY KEY(student_id)
);

SELECT * FROM student;
INSERT INTO student(name, major) VALUES('Jack', 'Biology');
INSERT INTO student(name, major) VALUES('Kate', 'Sociology');

//updating data
UPDATE student
SET major='Bio'
WHERE major = 'Biology';


UPDATE student
SET name = 'Cesar', major = 'undecided'
WHERE student_id=1;

// deleting data
DELETE FROM student 
WHERE student_id=2;

//ascend & descend order
SELECT *
FROM student
ORDER BY student_id DESC; // ASC=ascend

//adding a foreign key
CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);
ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

// adding a composite key
CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  // -- adding composite key --> // PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

//Find all employees order by salary:
SELECT * FROM employee
ORDER by salary;


// changes the name of retrieved data
SELECT  first_name AS Forname, last_name AS Surname
FROM employee;

// special function that counts total number of data
SELECT COUNT(emp_id)
FROM employee; 

// selecting specific data (females born after 1970)
SELECT COUNT(emp_id)
FROM employee
WHERE sex= 'F' AND birth_day > '1970-01-01';

// finding the average of a integer ( average of employee salary)
SELECT AVG(salary)
FROM employee;
// finding the sum of employee salary
SELECT SUM(salary)
FROM employee;
// more specific data searches 
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;
// wildcards: % searches data, name ending with"string/int "
SELECT *
FROM client
WHERE client_name LIKE '%LLC';

// another wildcard example 
//%=any # of characters
// _=1character
SELECT *
FROM employee
WHERE birth_day LIKE '____-10%';

// combining 2 selects into 1
SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch;
 
// joins ( merging colums from different tables)
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = branch.mgr_id;


// nested queries
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN(
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000
)
